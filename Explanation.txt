                           Interfaces
           
Interfaces: What Are They?
1- An interface is like a contract. 
2- It lists methods (actions) that a class must implement, but it doesn’t say how to do them.
3- It’s a blueprint of “what” needs to be done, not “how.”
4- In C#, interfaces often start with I (for example:  IMenuService) to show they’re interfaces.
5-  These interfaces set rules,
   so any class that implements them must follow these rules.

for example : Any class that implements IMenuService must provide code for:
         [GetAllMenuItemsAsync, GetMenuItemByIdAsync, and AddMenuItemAsync], and so on for the other interfaces.

Separation:
   * Interfaces define “what” to do, 
   * while classes in RestaurantSystem.
 Note :  Services will define “how” (for example : using a database).



Finally : Simple Analogy
*Think of an interface as a menu at a restaurant.
*It says, “We offer these dishes: burgers, pizza, etc.” (the methods).
*The kitchen (a class like MenuService) decides how to cook them.
*The waiter (your controller) just needs the menu (interface) to take orders, not the recipe.

----------------------------------------------------------------------------------------------------------------------------------------------
                                                Services
 Added to a folder named Services in the RestaurantSystem.Services project.
These classes (MenuService, OrderService) contain the business logic for your restaurant system, 
interacting with the database via Entity Framework Core (EF Core) to manage menu items and orders .

Notes:
1- Services are classes that implement the interfaces.
2- They contain the actual code that does the work defined by the interfaces.
3- For example, MenuService implements IMenuService and provides the code for methods like GetAllMenuItemsAsync.
4- Services are where the real logic happens, like fetching data from a database or processing orders.
5- They are responsible for the "how" part of the operations defined in the interfaces.
6- Services are typically used by controllers to handle requests and return responses.
7- They can also include additional logic, such as validation or error handling.
8- Services are often injected into controllers using Dependency Injection (DI) to promote loose coupling and testability.

---------------------------------------------------------------------------------------------------------------------------------------------
                                                Middlewares
1- Middlewares are components in the ASP.NET Core pipeline that handle requests and responses.
2-This one ensures that unhandled errors don’t crash your app and instead return a user-friendly JSON response.
3- They can perform tasks like logging, authentication, or modifying requests before they reach the controller.
4- Middlewares are added to the pipeline in the program.cs file using the Configure method.
5- Middlewares can be ordered, meaning the order in which they are added affects how requests are processed.
6- They can also be used to modify the response before it is sent back to the client.
7- Middlewares can access the request and response objects, allowing them to read or modify headers, body, or other properties.
                            
                                        Extension Method: 
1- It simplifies adding your custom middleware.
2- It allows you to call your middleware in a more readable way.
3-Why Static?: Extension methods are static and placed in a static class, following .NET conventions for easy use.

----------------------------------------------------------------------------------------------------------------------------------------------
                                                  Controllers
1- Controllers are classes that handle incoming HTTP requests in an ASP.NET Core application.
2- They are responsible for processing requests, interacting with services, and returning responses.
3- Controllers are typically decorated with the [ApiController] attribute, which provides additional features like automatic model validation and response formatting.
4- return responses. They act as the entry point for your API.
5- Controllers contain action methods that respond to HTTP verbs like GET, POST, PUT, and DELETE.
6- Action methods are decorated with attributes like [HttpGet], [HttpPost], etc., to specify the type of request they handle.
7- Controllers can use Dependency Injection (DI) to access services, allowing them to perform business logic without directly interacting with the database.
8- They can also return various types of responses, such as JSON, HTML, or status codes, depending on the request and the action method's logic.
9-PI Endpoints: Controllers define the entry points for your API, making your restaurant system accessible via HTTP (ex: for a front-end app).
Notes on implementation:
 1-controllername: ControllerBase, a base class for API controllers (without view support, unlike Controller for web apps).
 2-[Route("api/[controller]")]:
Defines the base URL path for this controller. [controller] is a placeholder for the controller name (ex, Menu), so routes start with /api/Menu.
 3-[ApiController]: Marks this as an API controller, enabling features like automatic model validation and JSON responses.
 4- MenuController: Handles HTTP requests for menu items, like getting all items, fetching one by ID, or adding a new one.
 5-OrderController: Manages HTTP requests for orders, like creating a new order or retrieving an existing one by ID.
 -----------------------------------------------------------------------------------------------------------------------------------------------