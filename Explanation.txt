Interfaces: What Are They?
1- An interface is like a contract. 
2- It lists methods (actions) that a class must implement, but it doesn’t say how to do them.
3- It’s a blueprint of “what” needs to be done, not “how.”
4- In C#, interfaces often start with I (for example:  IMenuService) to show they’re interfaces.

               ------------------------------------------------------------
Separation:
   * Interfaces define “what” to do, 
   * while classes in RestaurantSystem.
 Note :  Services will define “how” (for example : using a database).


5-  These interfaces set rules,
   so any class that implements them must follow these rules.

for example : Any class that implements IMenuService must provide code for:
         [GetAllMenuItemsAsync, GetMenuItemByIdAsync, and AddMenuItemAsync], and so on for the other interfaces.


Finally : Simple Analogy
*Think of an interface as a menu at a restaurant.
*It says, “We offer these dishes: burgers, pizza, etc.” (the methods).
*The kitchen (a class like MenuService) decides how to cook them.
*The waiter (your controller) just needs the menu (interface) to take orders, not the recipe.